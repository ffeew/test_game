/**
* Performs addition/subtraction on two 16 bit values, following the lab 3 schematic
*
* @input a       - 16 bit input from reg A
* @input b       - 16 bit input from reg B
* @input literal - 16 bit input from reg B
* @input asel    - if set to 0, use the value from reg_a. else use 0
* @input bsel    - if set to 0, use the value from reg_b. else use literal
* @input wdsel   - if set to 0, use the value from the ALU output. else use 0
* 
* @input alufn -  6 bit control signal
*   adder unit
*   00 0000: a+b,
*   00 0001: a-b,
*
*   multiplier unit
*   00 0100: a*b,
*   00 0101: a/b,
*   00 0110: a%b,
*
*   boolean unit
*   01 1000: a AND b,
*   01 1110: a  OR b,
*   01 0110: a XOR b,
*   01 1010: return a,
*   01 0111: a NAND b,
*   01 0001: a NOR b,
*   01 1001: a XNOR b,
*   01 1100: return b,
*
*   shifter unit
*   10 0000: a  << b,  (unsigned left shift)
*   10 0001: a  >> b,  (unsigned right shift)
*   10 0011: a >>> b,  (signed/arithmetic right shift)
*
*   compare unit
*   11 0011: a == b,   (equals to)
*   11 0101: a  < b,   (strictly less than)
*   11 0111: a <= b,   (less than or equals to)
*
* @output out  - 16 bit result of the operation performed
* @output z    -  1 bit, set to true if the result from adder is 0
* @output v    -  1 bit, set to true if there is an overflow from adder
* @output n    -  1 bit, set to true if the result from adder is negative
* @output e    -  1 bit, set to true if an arithmetic error occured (currently, the only error that can happen is div by 0 in multiplier)
*/

module alu (
    input a[16],
    input b[16],
    input literal[16],

    input asel,
    input bsel,
    input wdsel,

    input alufn[6],
    
    output out[16],
    output z,
    output v,
    output n,
    output e
  ) {

  sig inp_b[16];
  sig inp_a[16];

  // instantiate all the components
  .alufn(alufn) {
    .a(inp_a), .b(inp_b) {
      adder adderALU; 
      boolean booleanALU;
      shifter shifterALU;
      multiplier multiplierALU;
    }
    compare compareALU;
  }
  
  // temp variable to choose add/multiply
  sig mul_or_add[16];
  
  always {
    inp_a = a;
    inp_b = b;

    if(asel)
      inp_a = 0;
    if(bsel)
      inp_b = literal;

    e = 0;
    z = adderALU.z;
    v = adderALU.v;
    n = adderALU.n;

    compareALU.z = adderALU.z;
    compareALU.v = adderALU.v;
    compareALU.n = adderALU.n;
    
    // choose whether to add or multiply (we used the ALUFN[2] signal instead of ALUFN[1] signal to standardise and enable easy access to the signals for multiplier 100, 101, 110)
    case(alufn[2]) {
      1b0:
        mul_or_add = adderALU.out;
      1b1:
        mul_or_add = multiplierALU.out;
        e = multiplierALU.div_by_zero;
      default:
        mul_or_add = 16h0;
    }
    
    // choose one of the functions of the ALU using the two most significant bits of the ALUFN
    case(alufn[5:4]) {
      2b00:
        out = mul_or_add;
      2b01:
        out = booleanALU.out;
      2b10:
        out = shifterALU.out;
      2b11:
        out = compareALU.out;
      default:
        out = 16b0;
    }

    if(wdsel)
      out = 0;
  }
}
